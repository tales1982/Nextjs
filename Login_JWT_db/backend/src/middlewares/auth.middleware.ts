import { Request, Response, NextFunction } from 'express'
import jwt from 'jsonwebtoken'
///////////////////////////////////////////////////////////////////////////////////////////////
/// ‚Üí Importa os tipos do Express:                                                          ///
///     - Request ‚Üí representa a requisi√ß√£o do usu√°rio                                      ///
///     - Response ‚Üí representa a resposta que ser√° enviada                                 ///
///     - NextFunction ‚Üí fun√ß√£o que chama o pr√≥ximo middleware/rota                         ///
///////////////////////////////////////////////////////////////////////////////////////////////
/// ‚Üí Importa a lib jsonwebtoken, usada para verificar (decodificar e validar) o token JWT. ///
///////////////////////////////////////////////////////////////////////////////////////////////


const JWT_SECRET = process.env.JWT_SECRET || 'secret'
////////////////////////////////////////////////////////////////////////////////////
/// ‚Üí Usa a chave secreta do .env para validar o token. Se n√£o estiver definida, ///
///     - usa 'secret' (apenas pra testes).                                      ///
////////////////////////////////////////////////////////////////////////////////////


export const authenticateToken = (
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  const authHeader = req.headers['authorization']
  const token = authHeader?.split(' ')[1]

  if (!token) {
    res.status(401).json({ message: 'Token not provided' })
    return
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as { userId: string }
    ;(req as any).userId = decoded.userId
    next()
  } catch (err) {
    res.status(403).json({ message: 'Invalid token' })
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// üîê Middleware: authenticateToken                                                                        ///
/// ‚Üí Declara uma fun√ß√£o que ser√° usada antes de executar uma rota protegida.                               ///
/// ‚Üí Pega o cabe√ßalho de autoriza√ß√£o da requisi√ß√£o HTTP.                                                   ///
/// ‚Üí Divide o cabe√ßalho e pega s√≥ o token (segunda parte, ap√≥s Bearer).                                    ///
/// üõë Verifica√ß√£o se o token foi enviado                                                                   ///
/// ‚Üí Se n√£o tiver token, retorna erro 401 (n√£o autorizado) e interrompe a execu√ß√£o.                        ///
/// üîê Valida√ß√£o do token:                                                                                  ///
/// ‚Üí Tenta decodificar e verificar o token com a chave secreta.                                            ///
/// Se for v√°lido, ele extrai o userId que foi salvo dentro do token no login.                              ///
/// ‚Üí Salva o userId decodificado dentro da requisi√ß√£o, para que outros controladores possam acess√°-lo.     ///
/// A asser√ß√£o (req as any) √© usada porque Request n√£o tem userId por padr√£o.                               ///
/// ‚Üí Tudo certo! Chama o pr√≥ximo middleware ou rota.                                                       ///
/// ‚ùå Se der erro (token inv√°lido, expirado, malformado):                                                  ///
/// ‚Üí Retorna erro 403 (acesso proibido), indicando que o token √© inv√°lido ou foi adulterado.               ///
/// üîí Onde usar esse middleware:                                                                           ///
/// ‚Üí Essa rota /profile s√≥ ser√° acessada se o token for v√°lido. Caso contr√°rio, retorna erro.              ///
///////////////////////////////////////////////////////////////////////////////////////////////////////////////